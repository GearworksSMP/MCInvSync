plugins {
    id 'fabric-loom' version '1.0.12'
    id 'com.modrinth.minotaur' version '2.+'
}

allprojects {
    // This can get extracted into a root build.gradle if needed
    ext {
        getCurrentShortRevision = {
            // Got from https://github.com/PaperMC/Velocity/blob/dev/3.0.0/build.gradle
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    executable = "git"
                    args = ["rev-parse", "HEAD"]
                    standardOutput = os
                }
                return os.toString().trim().substring(0, 8)
            }
        }

        getLatestTag = {
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    executable = "git"
                    args = ["describe", "--tags", "--abbrev=0"]
                    standardOutput = os
                }
                return os.toString().trim()
            }
        }

        getCurrentCommitCount = {
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    executable = "git"
                    args = ["rev-list", "--all", "--count"]
                    standardOutput = os
                }
                return os.toString().trim()
            }
        }
    }

    try {
        project.version = "${project.ext.getLatestTag()}-${project.ext.getCurrentCommitCount()}-${project.ext.getCurrentShortRevision()}"
    } catch (Exception ignored) {
        println('Either git is not set up properly, or there is no tag yet in the repository. Falling back to version \'0\'')
        project.version = '0'
    }
    project.group = 'michiruf'
}

repositories {
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.shedaniel.me/" }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Configuration microconfig library
    modImplementation(include('com.github.P03W:Microconfig:2.2.1'))

    // OrmLite
    modImplementation(include('com.j256.ormlite:ormlite-jdbc:6.1'))
    modImplementation(include('org.xerial:sqlite-jdbc:3.40.0.0'))
    modImplementation(include('mysql:mysql-connector-java:8.0.30'))
    modImplementation(include('org.postgresql:postgresql:42.5.1'))

    // Tests
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
}

modrinth {
    projectId = 'mr-invsync'
    versionNumber = project.version
    versionType = project.version.contains('SNAPSHOT') ? 'alpha' : 'release'
    gameVersions = ['1.19.1', '1.19.2', '1.19.3']
    loaders = ['fabric']
    dependencies {
        required.project 'fabric-api'
    }
    uploadFile = remapJar
    syncBodyFrom = rootProject.file("README.md").text

    // Use the environment variable `$MODRINTH_TOKEN` for the token
    // token = 'mySecretToken'
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = 'invsync'
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'
    testLogging {
        events 'passed'
    }
}
